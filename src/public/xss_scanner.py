import requests
from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException

def check_xss(url):
    # Set up Chrome options for Selenium
    chrome_options = Options()
    chrome_options.add_argument("--headless")  # Runs Chrome in headless mode.
    chrome_options.add_argument('--no-sandbox')  # Bypass OS security model, necessary if running as root (not recommended).

    # Path to your chromedriver
    chromedriver_path = 'C:\chrome-win64\chrome.exe'  # Adjust this path if necessary
    
    # Set service to chromedriver
    service = Service(executable_path=chromedriver_path)
    
    # Initialize WebDriver
    driver = webdriver.Chrome(service=service, options=chrome_options)

    # Define your payloads
    payloads = ["<script>alert('XSS')</script>", "..."]
    
    # Check each payload
    for payload in payloads:
        try:
            driver.get(url + payload)
            WebDriverWait(driver, 3).until(EC.alert_is_present(),
                                            'Timed out waiting for PA creation ' +
                                            'confirmation popup to appear.')

            alert = driver.switch_to.alert
            alert_text = alert.text
            alert.accept()
            print("alert accepted")
            return True, alert_text  # XSS vulnerability found
        except TimeoutException:
            print("no alert")
            # No alert means no XSS detected (or it might not be reflected XSS)
            continue
        finally:
            driver.quit()
    
    return False, "No reflected XSS vulnerability found with the test payloads."
